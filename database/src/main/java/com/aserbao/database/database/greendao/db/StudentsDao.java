package com.aserbao.database.database.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.base.Students;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENTS".
*/
public class StudentsDao extends AbstractDao<Students, Void> {

    public static final String TABLENAME = "STUDENTS";

    /**
     * Properties of entity Students.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Student = new Property(0, int.class, "Student", false, "STUDENT");
    }


    public StudentsDao(DaoConfig config) {
        super(config);
    }
    
    public StudentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENTS\" (" + //
                "\"STUDENT\" INTEGER NOT NULL );"); // 0: Student
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Students entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStudent());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Students entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStudent());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Students readEntity(Cursor cursor, int offset) {
        Students entity = new Students( //
            cursor.getInt(offset + 0) // Student
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Students entity, int offset) {
        entity.setStudent(cursor.getInt(offset + 0));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Students entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Students entity) {
        return null;
    }

    @Override
    public boolean hasKey(Students entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

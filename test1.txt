//
//  AboutLight.cpp
//  ASOpenGL
//
//  Created by aserbao on 2021/3/25.
//

#include "AboutLight.h"
/// --------------------------- 颜色---------------------------
void LightColor::doMovement(){
    GLfloat currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;
    // 摄像机控制
      GLfloat cameraSpeed = 5.0f * deltaTime;
      if(keys[GLFW_KEY_W])
        cameraPos += cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_S])
        cameraPos -= cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_A])
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
      if(keys[GLFW_KEY_D])
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

void LightColor::mouse_callback(GLFWwindow *window, double xpos, double ypos){
    if(firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    GLfloat xoffset = xpos - lastX;
    GLfloat yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    GLfloat sensitivity = 0.05;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw   += xoffset;
    pitch += yoffset;

    if(pitch > 89.0f)
        pitch = 89.0f;
    if(pitch < -89.0f)
        pitch = -89.0f;


    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(front);


}

void LightColor::scroll_callback(GLFWwindow* window, double xoffset, double yoffset){
    fov -= (float)yoffset;
//    if (fov < 1.0f)
//        fov = 1.0f;
//    if (fov > 45.0f)
//        fov = 45.0f;

    fov = (int)fov % 180;
    cout << "fov =" << fov << endl;
}
void LightColor::glImage(){
    // 生成纹理
    glGenTextures(1, &texture1);
    // 绑定当前纹理
    glBindTexture(GL_TEXTURE_2D, texture1);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);    // Set texture wrapping to GL_REPEAT
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
//    unsigned char* image = SOIL_load_image("container.jpg", &width, &height, 0, SOIL_LOAD_RGB);
    int width, height, nrChannels;
//    unsigned char *image = stbi_load("/Users/bytedance/Downloads/1.png", &width, &height, &nrChannels, 0);
    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/container.jpg", &width, &height, 0,SOIL_LOAD_RGB);
//    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    // 释放绑定纹理对象
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

    // ===================
    // Texture 2
    // ===================
    glGenTextures(1, &texture2);
    glBindTexture(GL_TEXTURE_2D, texture2);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // Load, create texture and generate mipmaps
    image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

}
void LightColor::initWithShape(){
    GLint vertexShader = GlUtils::compileShader(vertexShaderSource, GL_VERTEX_SHADER);
    GLuint fragmentShader = GlUtils::compileShader(fragmentShaderSource, GL_FRAGMENT_SHADER);
    shaderProgram = GlUtils::commonGlCreateProgram(vertexShader,fragmentShader);

    GLint lightVertexShader = GlUtils::compileShader(lightVertexShaderSource, GL_VERTEX_SHADER);
    GLuint lightFragmentShader = GlUtils::compileShader(lightFragmentSource, GL_FRAGMENT_SHADER);
    lightProgram = GlUtils::commonGlCreateProgram(lightVertexShader,lightFragmentShader);

    cout <<"shaderProgram=" << shaderProgram << "   lightProgram=" << lightProgram << endl;
    // Set up vertex data (and buffer(s)) and attribute pointers
    GLfloat vertices[] = {
              // ---- 位置 ----      - 纹理坐标 -
               -0.5f, -0.5f, -0.5f,
                0.5f, -0.5f, -0.5f,
                0.5f,  0.5f, -0.5f,
                0.5f,  0.5f, -0.5f,
               -0.5f,  0.5f, -0.5f,
               -0.5f, -0.5f, -0.5f,

               -0.5f, -0.5f,  0.5f,
                0.5f, -0.5f,  0.5f,
                0.5f,  0.5f,  0.5f,
                0.5f,  0.5f,  0.5f,
               -0.5f,  0.5f,  0.5f,
               -0.5f, -0.5f,  0.5f,

               -0.5f,  0.5f,  0.5f,
               -0.5f,  0.5f, -0.5f,
               -0.5f, -0.5f, -0.5f,
               -0.5f, -0.5f, -0.5f,
               -0.5f, -0.5f,  0.5f,
               -0.5f,  0.5f,  0.5f,

                0.5f,  0.5f,  0.5f,
                0.5f,  0.5f, -0.5f,
                0.5f, -0.5f, -0.5f,
                0.5f, -0.5f, -0.5f,
                0.5f, -0.5f,  0.5f,
                0.5f,  0.5f,  0.5f,

               -0.5f, -0.5f, -0.5f,
                0.5f, -0.5f, -0.5f,
                0.5f, -0.5f,  0.5f,
                0.5f, -0.5f,  0.5f,
               -0.5f, -0.5f,  0.5f,
               -0.5f, -0.5f, -0.5f,

               -0.5f,  0.5f, -0.5f,
                0.5f,  0.5f, -0.5f,
                0.5f,  0.5f,  0.5f,
                0.5f,  0.5f,  0.5f,
               -0.5f,  0.5f,  0.5f,
               -0.5f,  0.5f, -0.5f
    };

    // 创建顶点缓冲对象和顶点数组对象
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // 绑定顶点数组对象和顶点缓冲对象
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //将顶点数据复制到缓冲的内存中。
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // 设置顶点属性指针
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    glGenVertexArrays(1, &lightVAO);
    glBindVertexArray(lightVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);


    //解绑VAO
//    glBindBuffer(GL_ARRAY_BUFFER, 0);
//    glBindVertexArray(0);

}

void LightColor::drawFrame(){
    // Draw our first triangle
    glUseProgram(shaderProgram);
    doMovement();
    double time = (float)((int)(glfwGetTime() * 100.00) % 100) /100.0f;

    GLint objectColorLoc = glGetUniformLocation(shaderProgram, "objectColor");
    GLint lightColorLoc  = glGetUniformLocation(shaderProgram, "lightColor");
//    glUniform3f(objectColorLoc, 1.0f, 0.5f, 0.31f);// 我们所熟悉的珊瑚红
    glUniform3f(objectColorLoc, 1.0f, time, 0.31f);
    glUniform3f(lightColorLoc,  1.0f, 1.0f, 1.0f); // 依旧把光源设置为白色
    glm::mat4 view = glm::mat4(1.0f);
    // 注意，我们将矩阵向我们要进行移动场景的反向移动。

    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
    GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));

    glm::mat4 projection = glm::mat4(1.0f);
    projection = glm::perspective(glm::radians(fov), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);// 透视投影
    GLint projectionLoc = glGetUniformLocation(shaderProgram, "projection");
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
    glm::mat4 model = glm::mat4(1.0f);
    model = glm::translate(model, cubePositions[0]);
    GLfloat angle = (GLfloat)glfwGetTime() * glm::radians(5.0f) ;
    model = glm::rotate(model, angle, glm::vec3(1.0f, 0.3f, 0.5f));
    glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);

//    glBindVertexArray(0);

    glUseProgram(lightProgram);

    GLint lightViewLoc = glGetUniformLocation(lightProgram, "lightView");
    glUniformMatrix4fv(lightViewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint lightProjectionLoc = glGetUniformLocation(lightProgram, "lightProjection");
    glUniformMatrix4fv(lightProjectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    glm::mat4 lightModel = glm::mat4(1.0f);
    GLint lightModelLoc = glGetUniformLocation(lightProgram, "lightModel");
    lightModel = glm::translate(lightModel, lightPos);
    lightModel = glm::scale(lightModel, glm::vec3(0.2f));
    glUniformMatrix4fv(lightModelLoc, 1, GL_FALSE, glm::value_ptr(lightModel));

    glBindVertexArray(lightVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);



    glBindVertexArray(0);
}

void LightColor::key_callback(GLFWwindow* window, int key, int scancode, int action, int mode){
    if(action == GLFW_PRESS)
        keys[key] = true;
    else if(action == GLFW_RELEASE)
        keys[key] = false;
}

/// --------------------------- 颜色基础---------------------------
void LightBasic::doMovement(){
    GLfloat currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;
    // 摄像机控制
      GLfloat cameraSpeed = 5.0f * deltaTime;
      if(keys[GLFW_KEY_W])
        cameraPos += cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_S])
        cameraPos -= cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_A])
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
      if(keys[GLFW_KEY_D])
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

void LightBasic::mouse_callback(GLFWwindow *window, double xpos, double ypos){
    if(firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    GLfloat xoffset = xpos - lastX;
    GLfloat yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    GLfloat sensitivity = 0.05;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw   += xoffset;
    pitch += yoffset;

    if(pitch > 89.0f)
        pitch = 89.0f;
    if(pitch < -89.0f)
        pitch = -89.0f;


    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(front);


}

void LightBasic::scroll_callback(GLFWwindow* window, double xoffset, double yoffset){
    fov -= (float)yoffset;
//    if (fov < 1.0f)
//        fov = 1.0f;
//    if (fov > 45.0f)
//        fov = 45.0f;

    fov = (int)fov % 180;
    cout << "fov =" << fov << endl;
}
void LightBasic::glImage(){
    // 生成纹理
    glGenTextures(1, &texture1);
    // 绑定当前纹理
    glBindTexture(GL_TEXTURE_2D, texture1);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);    // Set texture wrapping to GL_REPEAT
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
//    unsigned char* image = SOIL_load_image("container.jpg", &width, &height, 0, SOIL_LOAD_RGB);
    int width, height, nrChannels;
//    unsigned char *image = stbi_load("/Users/bytedance/Downloads/1.png", &width, &height, &nrChannels, 0);
    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/container.jpg", &width, &height, 0,SOIL_LOAD_RGB);
//    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    // 释放绑定纹理对象
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

    // ===================
    // Texture 2
    // ===================
    glGenTextures(1, &texture2);
    glBindTexture(GL_TEXTURE_2D, texture2);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // Load, create texture and generate mipmaps
    image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

}
void LightBasic::initWithShape(){
    GLint vertexShader = GlUtils::compileShader(vertexShaderSource, GL_VERTEX_SHADER);
    GLuint fragmentShader = GlUtils::compileShader(fragmentShaderSource, GL_FRAGMENT_SHADER);
    shaderProgram = GlUtils::commonGlCreateProgram(vertexShader,fragmentShader);

    GLint lightVertexShader = GlUtils::compileShader(lightVertexShaderSource, GL_VERTEX_SHADER);
    GLuint lightFragmentShader = GlUtils::compileShader(lightFragmentSource, GL_FRAGMENT_SHADER);
    lightProgram = GlUtils::commonGlCreateProgram(lightVertexShader,lightFragmentShader);

    cout <<"shaderProgram=" << shaderProgram << "   lightProgram=" << lightProgram << endl;
    // Set up vertex data (and buffer(s)) and attribute pointers
    float vertices[] = {
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,

        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
         0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
    };
    // 创建顶点缓冲对象和顶点数组对象

    glGenVertexArrays(1, &cubeVAO);
    glGenBuffers(1, &VBO);
    // 绑定顶点数组对象和顶点缓冲对象
    glBindVertexArray(cubeVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //将顶点数据复制到缓冲的内存中。
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // 设置顶点属性指针
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
    glEnableVertexAttribArray(1);
//    glBindVertexArray(0);


    glGenVertexArrays(1, &lightVAO);
    glBindVertexArray(lightVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    glBindVertexArray(0);

    //解绑VAO
//    glBindBuffer(GL_ARRAY_BUFFER, 0);
//    glBindVertexArray(0);

}

void LightBasic::drawFrame(){
    // Draw our first triangle
    glUseProgram(shaderProgram);
    doMovement();
    double time = (float)((int)(glfwGetTime() * 100.00) % 100) /100.0f;

    GLint objectColorLoc = glGetUniformLocation(shaderProgram, "objectColor");
    GLint lightBasicLoc  = glGetUniformLocation(shaderProgram, "lightColor");
    GLint lightPosLoc = glGetUniformLocation(shaderProgram, "lightPos");
    GLint viewPosLoc = glGetUniformLocation(shaderProgram, "viewPos");
    glUniform3f(objectColorLoc, 1.0f, 0.5f, 0.31f);
    glUniform3f(lightBasicLoc,  1.0f, 1.0f, 1.0f);// 依旧把光源设置为白色
    glUniform3f(lightPosLoc, lightPos.x, lightPos.y, lightPos.z); // 设置光源位置
    glUniform3f(viewPosLoc, cameraPos.x, cameraPos.y, cameraPos.z); // 设置光源位置

    // ========================= 绘制物体 =========================

    GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
    glm::mat4 view = glm::mat4(1.0f);
    // 注意，我们将矩阵向我们要进行移动场景的反向移动。
    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint projectionLoc = glGetUniformLocation(shaderProgram, "projection");
    glm::mat4 projection = glm::mat4(1.0f);
    projection = glm::perspective(glm::radians(fov), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);// 透视投影
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
    glm::mat4 model = glm::mat4(1.0f);
    model = glm::translate(model, cubePositions[0]);
    GLfloat angle = (GLfloat)glfwGetTime() * glm::radians(5.0f) ;
//    model = glm::rotate(model, angle, glm::vec3(1.0f, 0.5f, 0.5f));
    glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

    glBindVertexArray(cubeVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);

    // ========================= 绘制光源 =========================
    glUseProgram(lightProgram);

    GLint lightViewLoc = glGetUniformLocation(lightProgram, "lightView");
    glUniformMatrix4fv(lightViewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint lightProjectionLoc = glGetUniformLocation(lightProgram, "lightProjection");
    glUniformMatrix4fv(lightProjectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint lightModelLoc = glGetUniformLocation(lightProgram, "lightModel");
    glm::mat4 lightModel = glm::mat4(1.0f);
    lightModel = glm::translate(lightModel, lightPos);
    lightModel = glm::scale(lightModel, glm::vec3(0.2f));
    glUniformMatrix4fv(lightModelLoc, 1, GL_FALSE, glm::value_ptr(lightModel));

    glBindVertexArray(lightVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);


    glBindVertexArray(0);
}

void LightBasic::key_callback(GLFWwindow* window, int key, int scancode, int action, int mode){
    if(action == GLFW_PRESS)
        keys[key] = true;
    else if(action == GLFW_RELEASE)
        keys[key] = false;
}

/// --------------------------- 光照材质 ---------------------------
void LightMaterial::doMovement(){
    GLfloat currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;
    // 摄像机控制
      GLfloat cameraSpeed = 5.0f * deltaTime;
      if(keys[GLFW_KEY_W])
        cameraPos += cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_S])
        cameraPos -= cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_A])
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
      if(keys[GLFW_KEY_D])
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if(keys[GLFW_KEY_UP])
        lightPos += cameraSpeed * cameraFront;
    if(keys[GLFW_KEY_DOWN])
        lightPos -= cameraSpeed * cameraFront;
    if(keys[GLFW_KEY_LEFT])
        lightPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if(keys[GLFW_KEY_RIGHT])
        lightPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

void LightMaterial::mouse_callback(GLFWwindow *window, double xpos, double ypos){
    if(firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    GLfloat xoffset = xpos - lastX;
    GLfloat yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    GLfloat sensitivity = 0.05;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw   += xoffset;
    pitch += yoffset;

    if(pitch > 89.0f)
        pitch = 89.0f;
    if(pitch < -89.0f)
        pitch = -89.0f;


    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(front);


}

void LightMaterial::scroll_callback(GLFWwindow* window, double xoffset, double yoffset){
    fov -= (float)yoffset;
//    if (fov < 1.0f)
//        fov = 1.0f;
//    if (fov > 45.0f)
//        fov = 45.0f;

    fov = (int)fov % 180;
    cout << "fov =" << fov << endl;
}
void LightMaterial::glImage(){
    // 生成纹理
    glGenTextures(1, &texture1);
    // 绑定当前纹理
    glBindTexture(GL_TEXTURE_2D, texture1);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);    // Set texture wrapping to GL_REPEAT
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
//    unsigned char* image = SOIL_load_image("container.jpg", &width, &height, 0, SOIL_LOAD_RGB);
    int width, height, nrChannels;
//    unsigned char *image = stbi_load("/Users/bytedance/Downloads/1.png", &width, &height, &nrChannels, 0);
    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/container.jpg", &width, &height, 0,SOIL_LOAD_RGB);
//    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    // 释放绑定纹理对象
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

    // ===================
    // Texture 2
    // ===================
    glGenTextures(1, &texture2);
    glBindTexture(GL_TEXTURE_2D, texture2);
    // Set our texture parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // Set texture filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // Load, create texture and generate mipmaps
    image = SOIL_load_image("/Users/bytedance/Downloads/1.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

}
void LightMaterial::initWithShape(){
    GLint vertexShader = GlUtils::compileShader(vertexShaderSource, GL_VERTEX_SHADER);
    GLuint fragmentShader = GlUtils::compileShader(fragmentShaderSource, GL_FRAGMENT_SHADER);
    shaderProgram = GlUtils::commonGlCreateProgram(vertexShader,fragmentShader);

    GLint lightVertexShader = GlUtils::compileShader(lightVertexShaderSource, GL_VERTEX_SHADER);
    GLuint lightFragmentShader = GlUtils::compileShader(lightFragmentSource, GL_FRAGMENT_SHADER);
    lightProgram = GlUtils::commonGlCreateProgram(lightVertexShader,lightFragmentShader);

    cout <<"shaderProgram=" << shaderProgram << "   lightProgram=" << lightProgram << endl;
    // Set up vertex data (and buffer(s)) and attribute pointers
    float vertices[] = {
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,

        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
         0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
    };
    // 创建顶点缓冲对象和顶点数组对象

    glGenVertexArrays(1, &cubeVAO);
    glGenBuffers(1, &VBO);
    // 绑定顶点数组对象和顶点缓冲对象
    glBindVertexArray(cubeVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //将顶点数据复制到缓冲的内存中。
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // 设置顶点属性指针
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
    glEnableVertexAttribArray(1);
//    glBindVertexArray(0);


    glGenVertexArrays(1, &lightVAO);
    glBindVertexArray(lightVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    glBindVertexArray(0);

    //解绑VAO
//    glBindBuffer(GL_ARRAY_BUFFER, 0);
//    glBindVertexArray(0);

}

void LightMaterial::drawFrame(){
    // Draw our first triangle
    glUseProgram(shaderProgram);
    doMovement();
    double time = (float)((int)(glfwGetTime() * 100.00) % 100) /100.0f;

    GLint viewPosLoc = glGetUniformLocation(shaderProgram, "viewPos");
    glUniform3f(viewPosLoc, cameraPos.x, cameraPos.y, cameraPos.z); // 设置光源位置

    //========================= set material =========================
    GLint matAmbientLoc = glGetUniformLocation(shaderProgram, "material.ambient");
    GLint matDiffuseLoc = glGetUniformLocation(shaderProgram, "material.diffuse");
    GLint matSpecularLoc = glGetUniformLocation(shaderProgram, "material.specular");
    GLint matShineLoc = glGetUniformLocation(shaderProgram, "material.shininess");
    glUniform3f(matAmbientLoc, 1.0f, 0.5f, 0.31f);
    glUniform3f(matDiffuseLoc, 1.0f, 0.5f, 0.31f);
    glUniform3f(matSpecularLoc, 0.5f, 0.5f, 0.5f);
    glUniform1f(matShineLoc, 32.0f);

    //========================= set light =========================
    glm::vec3 lightColor;
    lightColor.x = sin(glfwGetTime() * 2.0f);
    lightColor.y = sin(glfwGetTime() * 0.7f);
    lightColor.z = sin(glfwGetTime() * 1.3f);
    glm::vec3 diffuseColor = lightColor   * glm::vec3(0.5f); // decrease the influence
    glm::vec3 ambientColor = diffuseColor * glm::vec3(0.2f); // low influence
    GLint lightPositionLoc = glGetUniformLocation(shaderProgram, "light.position");
    GLint lightAmbientLoc = glGetUniformLocation(shaderProgram, "light.ambient");
    GLint lightDiffuseLoc = glGetUniformLocation(shaderProgram, "light.diffuse");
    GLint lightSpecularLoc = glGetUniformLocation(shaderProgram, "light.specular");

    glUniform3f(lightPositionLoc, lightPos.x, lightPos.y, lightPos.z);
    glUniform3f(lightAmbientLoc,ambientColor.x,ambientColor.y,ambientColor.z);
    glUniform3f(lightDiffuseLoc,diffuseColor.x,diffuseColor.y,diffuseColor.z);
    glUniform3f(lightSpecularLoc, 1.0f, 1.0f, 1.0f);

    // ========================= 绘制物体 =========================

    GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
    glm::mat4 view = glm::mat4(1.0f);
    // 注意，我们将矩阵向我们要进行移动场景的反向移动。
    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint projectionLoc = glGetUniformLocation(shaderProgram, "projection");
    glm::mat4 projection = glm::mat4(1.0f);
    projection = glm::perspective(glm::radians(fov), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);// 透视投影
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
    glBindVertexArray(cubeVAO);
    for (GLuint i = 0; i < 10; i++)
    {
        // Calculate the model matrix for each object and pass it to shader before drawing
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::translate(model, cubePositions[i]);
        GLfloat angle = (GLfloat)glfwGetTime() * glm::radians(5.0f) * (i + 1);
        model = glm::rotate(model, angle, glm::vec3(1.0f, 0.3f, 0.5f));
        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

        glDrawArrays(GL_TRIANGLES, 0, 36);
    }

//    GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
//    glm::mat4 model = glm::mat4(1.0f);
//    model = glm::translate(model, cubePositions[0]);
//    GLfloat angle = (GLfloat)glfwGetTime() * glm::radians(5.0f) ;
////    model = glm::rotate(model, angle, glm::vec3(1.0f, 0.5f, 0.5f));
//    glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
//
//    glBindVertexArray(cubeVAO);
//    glDrawArrays(GL_TRIANGLES, 0, 36);

    // ========================= 绘制光源 =========================
    glUseProgram(lightProgram);

    GLint lightViewLoc = glGetUniformLocation(lightProgram, "lightView");
    glUniformMatrix4fv(lightViewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint lightProjectionLoc = glGetUniformLocation(lightProgram, "lightProjection");
    glUniformMatrix4fv(lightProjectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint lightModelLoc = glGetUniformLocation(lightProgram, "lightModel");
    glm::mat4 lightModel = glm::mat4(1.0f);
    lightModel = glm::translate(lightModel, lightPos);
    lightModel = glm::scale(lightModel, glm::vec3(0.2f));
    glUniformMatrix4fv(lightModelLoc, 1, GL_FALSE, glm::value_ptr(lightModel));

    glBindVertexArray(lightVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);


    glBindVertexArray(0);
}

void LightMaterial::key_callback(GLFWwindow* window, int key, int scancode, int action, int mode){

    cout << "key = "<< key << endl;
    if(action == GLFW_PRESS)
        keys[key] = true;
    else if(action == GLFW_RELEASE)
        keys[key] = false;
}


/// --------------------------- 光照纹理 ---------------------------
void LightTexture::doMovement(){
    GLfloat currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;
    // 摄像机控制
      GLfloat cameraSpeed = 5.0f * deltaTime;
      if(keys[GLFW_KEY_W])
        cameraPos += cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_S])
        cameraPos -= cameraSpeed * cameraFront;
      if(keys[GLFW_KEY_A])
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
      if(keys[GLFW_KEY_D])
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if(keys[GLFW_KEY_UP])
        lightPos += cameraSpeed * cameraFront;
    if(keys[GLFW_KEY_DOWN])
        lightPos -= cameraSpeed * cameraFront;
    if(keys[GLFW_KEY_LEFT])
        lightPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if(keys[GLFW_KEY_RIGHT])
        lightPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

void LightTexture::mouse_callback(GLFWwindow *window, double xpos, double ypos){
    if(firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    GLfloat xoffset = xpos - lastX;
    GLfloat yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    GLfloat sensitivity = 0.05;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw   += xoffset;
    pitch += yoffset;

    if(pitch > 89.0f)
        pitch = 89.0f;
    if(pitch < -89.0f)
        pitch = -89.0f;


    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(front);


}

void LightTexture::scroll_callback(GLFWwindow* window, double xoffset, double yoffset){
    fov -= (float)yoffset;
//    if (fov < 1.0f)
//        fov = 1.0f;
//    if (fov > 45.0f)
//        fov = 45.0f;

    fov = (int)fov % 180;
    cout << "fov =" << fov << endl;
}
void LightTexture::glImage(){
    // 生成纹理
    glGenTextures(1, &texture1);
    // 绑定当前纹理
    glBindTexture(GL_TEXTURE_2D, texture1);
    int width, height, nrChannels;
//    unsigned char *image = stbi_load("/Users/bytedance/Downloads/container.png", &width, &height, &nrChannels, 0);
    unsigned char* image = SOIL_load_image("/Users/bytedance/Downloads/container.png", &width, &height, 0,SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST_MIPMAP_NEAREST);
    glGenerateMipmap(GL_TEXTURE_2D);
    // 释放绑定纹理对象
    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

    // ===================
    // Texture 2
    // ===================
    glGenTextures(1, &texture2);
    glBindTexture(GL_TEXTURE_2D, texture2);
    // Load, create texture and generate mipmaps
    image = SOIL_load_image("/Users/bytedance/Downloads/container2_specular.png", &width, &height, 0, SOIL_LOAD_RGB);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap(GL_TEXTURE_2D);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST_MIPMAP_NEAREST);

    SOIL_free_image_data(image);
    glBindTexture(GL_TEXTURE_2D, 0);

//    glActiveTexture(0);
//    glBindTexture(GL_TEXTURE_2D, texture1);
//    glUniform1i(glGetUniformLocation(shaderProgram, "material.diffuse"), 0);

//    glActiveTexture(1);
//    glBindTexture(GL_TEXTURE_2D, texture2);
//    glUniform1i(glGetUniformLocation(shaderProgram, "material.specular"), 1);

    glUniform1i(glGetUniformLocation(shaderProgram, "material.diffuse"),  0);
    glUniform1i(glGetUniformLocation(shaderProgram, "material.specular"), 1);

}
void LightTexture::initWithShape(){
    GLint vertexShader = GlUtils::compileShader(vertexShaderSource, GL_VERTEX_SHADER);
    GLuint fragmentShader = GlUtils::compileShader(fragmentShaderSource, GL_FRAGMENT_SHADER);
    shaderProgram = GlUtils::commonGlCreateProgram(vertexShader,fragmentShader);

    GLint lightVertexShader = GlUtils::compileShader(lightVertexShaderSource, GL_VERTEX_SHADER);
    GLuint lightFragmentShader = GlUtils::compileShader(lightFragmentSource, GL_FRAGMENT_SHADER);
    lightProgram = GlUtils::commonGlCreateProgram(lightVertexShader,lightFragmentShader);

    cout <<"shaderProgram=" << shaderProgram << "   lightProgram=" << lightProgram << endl;
    // Set up vertex data (and buffer(s)) and attribute pointers
    float vertices[] = {
        // Positions          // Normals           // Texture Coords
                -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
                 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  0.0f,
                 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
                 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
                -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  1.0f,
                -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,

                -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,
                 0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,
                 0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
                 0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
                -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  1.0f,
                -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,

                -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
                -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
                -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
                -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
                -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
                -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,

                 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
                 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
                 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
                 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
                 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
                 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,

                -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,
                 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  1.0f,
                 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
                 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
                -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  0.0f,
                -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,

                -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f,
                 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  1.0f,
                 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,
                 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,
                -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f,
                -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f
    };
    // 创建顶点缓冲对象和顶点数组对象

    glGenVertexArrays(1, &cubeVAO);
    glGenBuffers(1, &VBO);
    // 绑定顶点数组对象和顶点缓冲对象
    glBindVertexArray(cubeVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //将顶点数据复制到缓冲的内存中。
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // 设置顶点属性指针
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
    glEnableVertexAttribArray(2);

    glBindVertexArray(0);

    glGenVertexArrays(1, &lightVAO);
    glBindVertexArray(lightVAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    glBindVertexArray(0);


    glImage();
    //解绑VAO
//    glBindBuffer(GL_ARRAY_BUFFER, 0);
//    glBindVertexArray(0);

}

void LightTexture::drawFrame(){
    // Draw our first triangle
    glUseProgram(shaderProgram);
    doMovement();
    double time = (float)((int)(glfwGetTime() * 100.00) % 100) /100.0f;

    GLint viewPosLoc = glGetUniformLocation(shaderProgram, "viewPos");
    glUniform3f(viewPosLoc, cameraPos.x, cameraPos.y, cameraPos.z); // 设置光源位置

    //========================= set material =========================
//    GLint matAmbientLoc = glGetUniformLocation(shaderProgram, "material.ambient");
//    GLint matDiffuseLoc = glGetUniformLocation(shaderProgram, "material.diffuse");
//    GLint matSpecularLoc = glGetUniformLocation(shaderProgram, "material.specular");
    GLint matShineLoc = glGetUniformLocation(shaderProgram, "material.shininess");
//    glUniform3f(matAmbientLoc, 1.0f, 0.5f, 0.31f);
//    glUniform3f(matDiffuseLoc, 1.0f, 0.5f, 0.31f);
//    glUniform3f(matSpecularLoc, 0.5f, 0.5f, 0.5f);
    glUniform1f(matShineLoc, 32.0f);

    //========================= set light =========================
    glm::vec3 lightColor;
    lightColor.x = sin(glfwGetTime() * 2.0f);
    lightColor.y = sin(glfwGetTime() * 0.7f);
    lightColor.z = sin(glfwGetTime() * 1.3f);
//    glm::vec3 diffuseColor = lightColor   * glm::vec3(0.5f); // decrease the influence
//    glm::vec3 ambientColor = diffuseColor * glm::vec3(0.2f); // low influence
    glm::vec3 diffuseColor = glm::vec3(0.5f); // decrease the influence
    glm::vec3 ambientColor = glm::vec3(0.2f); // low influence

    GLint lightPositionLoc = glGetUniformLocation(shaderProgram, "light.position");
    GLint lightAmbientLoc = glGetUniformLocation(shaderProgram, "light.ambient");
    GLint lightDiffuseLoc = glGetUniformLocation(shaderProgram, "light.diffuse");
    GLint lightSpecularLoc = glGetUniformLocation(shaderProgram, "light.specular");

    glUniform3f(lightPositionLoc, lightPos.x, lightPos.y, lightPos.z);
    glUniform3f(lightAmbientLoc,ambientColor.x,ambientColor.y,ambientColor.z);
    glUniform3f(lightDiffuseLoc,diffuseColor.x,diffuseColor.y,diffuseColor.z);
    glUniform3f(lightSpecularLoc, 1.0f, 1.0f, 1.0f);

    // ========================= 绘制物体 =========================

    GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
    glm::mat4 view = glm::mat4(1.0f);
    // 注意，我们将矩阵向我们要进行移动场景的反向移动。
    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint projectionLoc = glGetUniformLocation(shaderProgram, "projection");
    glm::mat4 projection = glm::mat4(1.0f);
    projection = glm::perspective(glm::radians(fov), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);// 透视投影
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1);

    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, texture2);

    GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
    glm::mat4 model = glm::mat4(1.0f);
    model = glm::translate(model, cubePositions[0]);
    GLfloat angle = (GLfloat)glfwGetTime() * glm::radians(5.0f) ;
//    model = glm::rotate(model, angle, glm::vec3(1.0f, 0.5f, 0.5f));
    glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

    glBindVertexArray(cubeVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);

    // ========================= 绘制光源 =========================
    glUseProgram(lightProgram);

    GLint lightViewLoc = glGetUniformLocation(lightProgram, "lightView");
    glUniformMatrix4fv(lightViewLoc, 1, GL_FALSE, glm::value_ptr(view));

    GLint lightProjectionLoc = glGetUniformLocation(lightProgram, "lightProjection");
    glUniformMatrix4fv(lightProjectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

    GLint lightModelLoc = glGetUniformLocation(lightProgram, "lightModel");
    glm::mat4 lightModel = glm::mat4(1.0f);
    lightModel = glm::translate(lightModel, lightPos);
    lightModel = glm::scale(lightModel, glm::vec3(0.2f));
    glUniformMatrix4fv(lightModelLoc, 1, GL_FALSE, glm::value_ptr(lightModel));

    glBindVertexArray(lightVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);


    glBindVertexArray(0);
}

void LightTexture::key_callback(GLFWwindow* window, int key, int scancode, int action, int mode){

    cout << "key = "<< key << endl;
    if(action == GLFW_PRESS)
        keys[key] = true;
    else if(action == GLFW_RELEASE)
        keys[key] = false;
}
